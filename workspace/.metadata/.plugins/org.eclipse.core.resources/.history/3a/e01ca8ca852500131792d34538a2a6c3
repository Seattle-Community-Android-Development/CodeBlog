package com.helo478.codeblog.persistence;

import java.util.List;

import com.helo478.codeblog.user.InvalidUserException;
import com.helo478.codeblog.user.UserAccount;
import com.helo478.codeblog.user.UserException;

/**
 * Defines the public methods of a blog dao.
 * 
 * @author Donald Subert
 */
public interface BlogDao {

	/**
	 * Gets the user for a given user id.
	 * 
	 * @param userId
	 *            the user account primary key
	 * @return the user for the given user id
	 * @throws UserException
	 *             the user exception
	 */
	UserAccount getUserById(int userId) throws UserException;

	/**
	 * Gets the user for a given user name.
	 * 
	 * @param userName
	 *            the user name
	 * @return the user for the given user name
	 * @throws UserException
	 *             the user exception
	 * @throws InvalidUserException
	 */
	UserAccount getUserByName(String userName) throws UserException,
			InvalidUserException;

	/**
	 * Persists a user.
	 * 
	 * @param user
	 *            the new user
	 * @throws UserException
	 *             the user exception
	 */
	void setUser(UserAccount user) throws UserException;

	/**
	 * Get a list of the names of all bloggers.
	 * 
	 * @return a list of the names of all users who are bloggers
	 * 
	 * @throws UserException
	 *             the user exception
	 */
	List<String> getBloggersNamesList() throws UserException;

	/**
	 * Rename the given user to the given user name.
	 * 
	 * @param user
	 *            the user
	 * @param newUserName
	 *            the new user name
	 * @throws UserException
	 *             the user exception
	 */
	void renameUser(UserAccount user, String newUserName) throws UserException;

	/**
	 * Delete the user for a given user id.
	 * 
	 * @param userId
	 *            the user id
	 * @throws UserException
	 *             the user exception
	 */
	void deleteUser(int userId) throws UserException;

	/**
	 * Deletes all users.
	 * 
	 * @throws UserException
	 *             the user exception
	 */
	void reset() throws UserException;

	/**
	 * Close connection to the persistent data. This will cause an exception if
	 * methods are called afterward.
	 * 
	 * @throws UserException
	 *             the user exception
	 */
	void close() throws UserException;
}
