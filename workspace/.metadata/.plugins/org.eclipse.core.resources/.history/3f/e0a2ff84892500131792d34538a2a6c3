package com.helo478.codeblog.user;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Transient;

import com.helo478.codeblog.blog.BlogPost;
import com.helo478.codeblog.util.HibernateConstants;

@Entity
@Table(name = HibernateConstants.TABLE_NAME_USER_ACCOUNTS)
@NamedQueries({
		@NamedQuery(name = "UserAccount.byName", query = "from "
				+ HibernateConstants.TABLE_NAME_USER_ACCOUNTS
				+ " where userName = ?"),
		@NamedQuery(name = "UserAccount.getBloggersNamesList", query = "select "
				+ "userName"
				+ " from "
				+ HibernateConstants.TABLE_NAME_USER_ACCOUNTS
				+ " where "
				+ "isBlogger" + " is true") })
public class UserAccount {

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int userId;

	@Column(name = HibernateConstants.COL_NAME)
	private String userName;

	private byte[] passwordHash;

	@ElementCollection(fetch = FetchType.EAGER)
	private List<BlogPost> publishedBlogs;

	@Transient
	private UserManager userManager;

	@Column(name = HibernateConstants.COL_IS_BLOGGER)
	private boolean isBlogger = true;

	public UserAccount() {
		super();

		publishedBlogs = new ArrayList<BlogPost>();
	}

	public UserAccount(final String userName, final byte[] passwordHash) {
		this();
		this.userName = userName;
		this.passwordHash = passwordHash;

	}

	@Override
	public String toString() {
		return this.userName;
	}

	public int getUserId() {
		return userId;
	}

	public void setUserId(final int userId) {
		this.userId = userId;
	}

	public String getUserName() {
		return userName;
	}

	public void setUserName(final String userName) {
		this.userName = userName;
	}

	protected byte[] getPasswordHash() {
		return this.passwordHash;
	}

	public void setPasswordHash(final byte[] newPasswordHash) {
		this.passwordHash = newPasswordHash;
	}

	/**
	 * Sets a user manager, if it is not already set
	 * 
	 * @param userManager
	 */
	protected void setUserManager(final UserManager userManager) {

		if (this.userManager == null) {
			this.userManager = userManager;
		}
	}

	public void changePassword(final byte[] oldPasswordHash,
			final byte[] newPasswordHash) throws InvalidPasswordException {

		this.userManager.changePassword(this, oldPasswordHash, newPasswordHash);
	}

	final public void setIsBlogger(final boolean b) {
		this.isBlogger = b;
	}

	final public boolean isBlogger() {
		return this.isBlogger;
	}

	public List<BlogPost> getPublishedBlogs() {
		return this.publishedBlogs;
	}

	public void setPublishedBlogs(final List<BlogPost> publishedBlogs) {
		this.publishedBlogs = publishedBlogs;
	}
}